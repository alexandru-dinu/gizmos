#!/bin/sh

# enable extended globbing
# especially useful for !(pattern)
shopt -s extglob

# Ensure XDG_* vars {{{
if [ -z "$XDG_CONFIG_HOME" ]; then
    echo "Need to define \$XDG_CONFIG_HOME"
    exit 1
fi
if [ -z "$XDG_DATA_HOME" ]; then
    echo "Need to define \$XDG_DATA_HOME"
    exit 1
fi
if [ -z "$XDG_CACHE_HOME" ]; then
    echo "Need to define \$XDG_CACHE_HOME"
    exit 1
fi
# }}}

# Utils {{{
green() {
    echo -e "$(tput setaf 2)> $1$(tput sgr0)"
}

realpath() {
    if [[ $(uname -s) == 'Darwin' ]]; then
        [[ $1 == /* ]] && echo "$1" || echo "$PWD/${1#./}"
    else
        /usr/bin/realpath "$1"
    fi
}

show_func_info() {
    green $(echo ${FUNCNAME[1]} | cut -d'_' -f2-)
    type ${FUNCNAME[1]} | tail -n+3

    read -n 1 -r -p "Accept? [y/n] " yn; echo

    if [[ ! "$yn" =~ ^[Yy]$ ]]; then
        echo "Exiting..." && exit 1
    else
        echo "Configuring..."
    fi
}
# }}}

# Config: XDG-compliant {{{
config_starship() {
    show_func_info;

    ln -sf $(realpath ./.config/starship) $XDG_CONFIG_HOME/
}

config_nvim() {
    show_func_info;

    cfg_dir=$XDG_CONFIG_HOME/nvim
    data_dir=$XDG_DATA_HOME/nvim

    rm -rf $cfg_dir $data_dir
    mkdir -p $cfg_dir $data_dir

    ln -s $(realpath .config/vim/.vimrc) $cfg_dir/init.vim
    find .config/vim/* -type d -exec ln -s $(realpath {}) $cfg_dir \;

    curl -fLo $data_dir/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    nvim +PlugInstall +qall
}

config_gnu_emacs() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/emacs
    ln -s $(realpath ./.config/emacs) $XDG_CONFIG_HOME
}

config_doom_emacs() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/emacs
    rm -rf $XDG_CONFIG_HOME/doom

    git clone --depth 1 https://github.com/hlissner/doom-emacs $XDG_CONFIG_HOME/emacs
    $XDG_CONFIG_HOME/emacs/bin/doom install

    rm -rf $XDG_CONFIG_HOME/doom
    ln -s $(realpath .config/doom) $XDG_CONFIG_HOME

    $XDG_CONFIG_HOME/emacs/bin/doom sync
}

config_irb() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/irb
    ln -s $(realpath ./.config/irb) $XDG_CONFIG_HOME
    mkdir -p $XDG_DATA_HOME/irb

    gem install irbtools
}

config_rlang() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/R
    ln -s $(realpath ./.config/R) $XDG_CONFIG_HOME
    mkdir -p $XDG_DATA_HOME/R
}

config_gdb() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/gdb
    ln -s $(realpath ./.config/gdb) $XDG_CONFIG_HOME
}

config_npm() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/npm
    ln -s $(realpath ./.config/npm) $XDG_CONFIG_HOME
}

config_tmux() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/tmux
    ln -s $(realpath ./.config/tmux) $XDG_CONFIG_HOME
}

config_zathura() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/zathura
    ln -s $(realpath ./.config/zathura) $XDG_CONFIG_HOME/
}

config_sioyek() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/sioyek
    ln -s $(realpath ./.config/sioyek) $XDG_CONFIG_HOME/
}

config_conda() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/conda
    ln -s $(realpath ./.config/conda) $XDG_CONFIG_HOME
}

config_kitty() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/kitty
    ln -s $(realpath ./.config/kitty) $XDG_CONFIG_HOME
}

config_i3() {
    show_func_info;

    for f in i3 compton dunst; do
        rm -rf $XDG_CONFIG_HOME/$f
        ln -s $(realpath ./.config/$f) $XDG_CONFIG_HOME
    done
}

config_rofi() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/rofi
    ln -s $(realpath ./.config/rofi) $XDG_CONFIG_HOME
}

config_htop() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/htop
    ln -s $(realpath ./.config/htop) $XDG_CONFIG_HOME/
}

config_wget() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/wget
    ln -s $(realpath ./.config/wget) $XDG_CONFIG_HOME/
}

config_git() {
    show_func_info;

    git config --global init.defaultBranch main
    git config --global core.fileMode false
    git config --global core.editor ${EDITOR:-nvim}
    git config --global core.eol lf
}

config_symlinks() {
    show_func_info;

    mkdir -p ~/.local/bin

    for f in ./.local/bin/*; do
        ln -sf $(realpath "$f") ~/.local/bin
    done

    for f in ./.local/share/*; do
        ln -sf $(realpath "$f") $XDG_DATA_HOME
    done

    ln -sf $(realpath ./.config/mimeapps.list) $XDG_CONFIG_HOME

    ln -sf $(realpath ./.config/.xbindkeysrc) ~/
    xbindkeys --poll-rc
}
# }}}

# Config: others {{{
config_zsh() {
    show_func_info;

    cfg_dir=$HOME/.zsh/simple-zsh

    rm ~/.zshrc ~/.zshenv
    rm -rf $XDG_CONFIG_HOME/fzf

    for f in $cfg_dir ~/.zsh/cache; do
        rm -rf $f && mkdir -p $f
    done

    git clone --depth=1 --recurse-submodules --remote-submodules \
        https://github.com/alexandru-dinu/simple-zsh.git $cfg_dir

    cp sh/.zshrc ~/
    cp sh/.zshenv ~/

    exec zsh -i -c "echo Done!; exit"
}

config_bash() {
    show_func_info;

    cp sh/.bashrc ~/
}

config_vim() {
    show_func_info;

    rm -rf ~/.vim* && mkdir -p ~/.vim

    ln -s $(realpath ./.config/vim/.vimrc) ~/
    find ./.config/vim/* -type d -exec ln -s $(realpath {}) ~/.vim/ \;

    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    vim +PlugInstall +qall
}

config_vifm() {
    show_func_info;

    rm -rf $XDG_CONFIG_HOME/vifm
    ln -s $(realpath ./.config/vifm) $XDG_CONFIG_HOME
}

config_ghci() {
    show_func_info;

    rm -f ~/.ghci
    ln -s $(realpath ghci/.ghci) ~/.ghci
    chmod go-w ~/.ghci
}

config_vscode() {
    show_func_info;

    cfg_dir=$XDG_CONFIG_HOME/Code
    ext_dir=~/.vscode/extensions

    rm -rf ~/.vscode
    rm -rf $cfg_dir

    mkdir -p $cfg_dir/User

    declare -a configs=("keybindings.json" "settings.json" "snippets")

    for c in "${configs[@]}"; do
        ln -s $(realpath ./.config/vscode/$c) $cfg_dir/User/
    done
}

config_pycharm() {
    show_func_info;

    select cfg_dir in $(find $XDG_CONFIG_HOME/JetBrains -name "PyCharm*"); do
        echo "Selected $cfg_dir"; break;
    done

    for d in ./.config/pycharm/!(options); do
        f="$(basename "$d")"
        rm -rf "${cfg_dir:?}/$f"
        ln -s "$(realpath "$d")" "${cfg_dir:?}/$f"
    done

    for o in ./.config/pycharm/options/*; do
        f="$(basename "$o")"
        rm -rf "${cfg_dir:?}/options/$f"
        ln -s "$(realpath "$o")" "${cfg_dir:?}/options/$f"
    done
}

config_mxmaster() {
    show_func_info;

    sudo ln -sf $(realpath mxmaster/logid.cfg) /etc/
    sudo systemctl restart logid.service
}

config_jupyter() {
    show_func_info;

    ln -sf $(realpath ./.config/jupyter/lab/user-settings) $XDG_CONFIG_HOME/jupyter/lab
}

config_ipython() {
    show_func_info;

    cfg_dir=~/.ipython/profile_default
    mkdir -p $cfg_dir
    ln -sf $(realpath python/ipython_config.py) $cfg_dir
    ln -sf $(realpath python/startup) $cfg_dir
}

config_ptpython() {
    show_func_info;

    cfg_dir=$XDG_CONFIG_HOME/ptpython
    mkdir -p $cfg_dir
    ln -sf $(realpath python/ptpython_config.py) $cfg_dir/config.py
}
# }}}

# Entrypoint {{{
get_configs() {
    grep -oE "^config_[a-z0-9_]+" $0 | sed 's/config_//g' | sort
}

help() {
    echo -e "Usage: $0 <foo>\n"
    echo "Can configure the following:" && get_configs | column
}

if [ "$#" -gt 1 ]; then
    echo "At most one argument must be provided (what to config)."
    help && exit 1
fi

case "$1" in
"" | --help | -h)
    help
    ;;
*)
    if get_configs | grep -qw "$1"; then
        config_"$1"
    else
        echo "No config for $1!" && exit 1
    fi
    ;;
esac
# }}}

# vim:foldmethod=marker:foldlevel=0
