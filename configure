#!/bin/bash

green=$(tput setaf 2)
red=$(tput setaf 1)
reset=$(tput sgr0)

prompt() {
    echo -e "${green}> $1${reset}"
}

red_prompt() {
    echo -e "${red}> $1${reset}"
}

realpath() {
    if [[ $(uname -s) == 'Darwin' ]]; then
        [[ $1 == /* ]] && echo "$1" || echo "$PWD/${1#./}"
    else
        /usr/bin/realpath "$1"
    fi
}

func_name() {
    echo ${FUNCNAME[1]} | cut -d'_' -f2
}

config_zsh() {
    prompt $(func_name)

    rm -rf ~/.zshrc ~/.zshenv ~/.zsh/cache ~/.zsh/simple-zsh ~/.fzf*
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/alexandru-dinu/simple-zsh/main/install.sh)"

    mkdir -p ~/.zsh/cache
    cp zsh/.zshrc ~/
    cp zsh/.zshenv ~/
}

config_bash() {
    prompt $(func_name)

    cp bash/.bashrc ~/
}

config_vim() {
    prompt $(func_name)

    rm -rf ~/.vim* && mkdir -p ~/.vim
    ln -s $(realpath vim/.vimrc) ~/

    for d in $(ls -d vim/*); do
        ln -s $(realpath $d) ~/.vim/
    done

    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    vim +PlugInstall +qall
}

config_nvim() {
    prompt $(func_name)

    cfg_dir=~/.config/nvim
    data_dir=~/.local/share/nvim

    rm -rf $cfg_dir $data_dir
    mkdir -p $cfg_dir $data_dir

    ln -s $(realpath vim/.vimrc) ~/.config/nvim/init.vim
    ln -s $(realpath vim/colors) $cfg_dir/
    ln -s $(realpath vim/ftplugin) $cfg_dir/

    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    nvim +PlugInstall +qall
}

config_vifm() {
    prompt $(func_name)

    cfg_dir=~/.config/vifm

    rm -rf $cfg_dir
    ln -s $(realpath vifm) $cfg_dir
}

config_emacs() {
    prompt $(func_name)

    rm -rf ~/.emacs.d
    ln -s $(realpath emacs) ~/.emacs.d
}

config_ghci() {
    prompt $(func_name)

    rm -f ~/.ghci
    ln -s $(realpath ghci/.ghci) ~/.ghci
    chmod go-w ~/.ghci
}

config_ruby() {
    prompt $(func_name)

    gem install irbtools

    rm -f ~/.irbrc
    ln -s $(realpath ruby/.irbrc) ~/.irbrc
    chmod go-w ~/.irbrc
}

config_rlang() {
    prompt $(func_name)

    declare -a configs=(".Renviron" ".Rprofile")
    for f in "${configs[@]}"; do
        rm -f ~/$f && ln -s $(realpath r-lang/$f) ~/
    done
}

config_gdb() {
    prompt $(func_name)

    rm -rf ~/peda.git ~/.gdbinit
    git clone --depth=1 https://github.com/longld/peda.git ~/peda.git
    ln -s $(realpath gdb/.gdbinit) ~/.gdbinit
}

config_tmux() {
    prompt $(func_name)

    rm -f ~/.tmux.conf
    ln -s $(realpath tmux/.tmux.conf) ~/.tmux.conf
}

config_zathura() {
    prompt $(func_name)

    rm -rf ~/.config/zathura
    ln -s $(realpath zathura) ~/.config/
}

config_vscode() {
    prompt $(func_name)

    cfg_dir=~/.config/Code/User
    ext_dir=~/.vscode/extensions

    rm -rf ~/.vscode ~/.config/Code
    mkdir -p $cfg_dir

    declare -a configs=("keybindings.json" "settings.json")

    for c in "${configs[@]}"; do
        ln -s $(realpath vscode/$c) $cfg_dir/
    done
}

config_pycharm() {
    prompt $(func_name)

    cfg_dir=$(find ~/.config/JetBrains -name "PyCharm*" 2>/dev/null | head -n 1)

    echo "Found $cfg_dir"

    for d in $(ls jetbrains/pycharm | grep -v options); do
        rm -rf $cfg_dir/$d
        ln -s $(realpath jetbrains/pycharm/$d) $cfg_dir/$d
    done

    for o in $(ls jetbrains/pycharm/options); do
        rm -rf $cfg_dir/options/$o
        ln -s $(realpath jetbrains/pycharm/options/$o) $cfg_dir/options/$o
    done
}

config_idea() {
    prompt $(func_name)

    cfg_dir=$(find ~ -name ".Idea*" 2>/dev/null | head -n 1)

    echo "Found $cfg_dir"

    for d in $(ls jetbrains/idea | grep -v options); do
        rm -rf $cfg_dir/config/$d
        ln -s $(realpath jetbrains/pycharm/$d) $cfg_dir/config/$d
    done

    for o in $(ls jetbrains/pycharm/options); do
        rm -rf $cfg_dir/config/options/$o
        ln -s $(realpath jetbrains/pycharm/options/$o) $cfg_dir/config/options/$o
    done
}

config_conda() {
    prompt $(func_name)

    ln -sf $(realpath conda/.condarc) ~/.condarc
}

config_jupyter() {
    prompt $(func_name)

    ln -sf $(realpath jupyter/custom) ~/.jupyter
    ln -sf $(realpath jupyter/lab/user-settings) ~/.jupyter/lab
}

config_guake() {
    prompt $(func_name)

    dconf load /apps/guake/ <terminals/guake.dconf
}

config_terminator() {
    prompt $(func_name)

    cfg_dir=~/.config/terminator

    rm -rf $cfg_dir && mkdir -p $cfg_dir
    ln -s $(realpath terminals/terminator.settings) $cfg_dir/config
}

config_i3() {
    prompt $(func_name)

    rm -rf ~/.config/i3 ~/.config/compton
    mkdir -p ~/.config/i3 ~/.config/compton

    declare -a configs=("config" "i3status.conf" "i3blocks.conf")

    for c in "${configs[@]}"; do
        ln -s $(realpath i3/$c) ~/.config/i3/
    done

    ln -s $(realpath i3/compton.conf) ~/.config/compton/config

    for b in $(ls i3/bin); do
        sudo cp --remove-destination i3/bin/$b /usr/bin/ &&
            sudo chown $USER:$USER /usr/bin/$b &&
            sudo chmod +x /usr/bin/$b
    done

    # remove default i3blocks dir
    sudo rm -rf /usr/share/i3blocks
}

config_rofi() {
    prompt $(func_name)

    cfg_dir=~/.config/rofi
    local_dir=~/.local/share/rofi/

    rm -rf ${cfg_dir} && mkdir -p ${cfg_dir}
    ln -s $(realpath rofi/rofi.conf) ${cfg_dir}/config

    sudo rm -rf /usr/share/rofi
    sudo rm -rf ${local_dir} && mkdir -p ${local_dir}
    ln -s $(realpath rofi/themes) ${local_dir}
}

config_mxmaster() {
    prompt $(func_name)

    sudo ln -sf $(realpath mx-master/logid.cfg) /etc/
    sudo systemctl restart logid.service
}

config_ipython() {
    prompt $(func_name)

    cfg_dir=~/.ipython/profile_default
    mkdir -p $cfg_dir
    ln -sf $(realpath python/ipython_config.py) $cfg_dir
}

config_ptpython() {
    prompt $(func_name)

    cfg_dir=~/.config/ptpython
    mkdir -p $cfg_dir
    ln -sf $(realpath python/ptpython_config.py) $cfg_dir/config.py
}

config_htop() {
    prompt $(func_name)

    cfg_dir=~/.config/htop
    rm -rf $cfg_dir && ln -s $(realpath htop) $cfg_dir
}

config_git() {
    prompt $(func_name)

    set -x

    git config --global core.fileMode false
    git config --global core.editor vim
    git config --global core.eol lf

    set +x
}

config_firefox() {
    prompt $(func_name)

    cd firefox && python patch.py && cd -
}

config_cinnamon() {
    prompt $(func_name)

    js_dir="/usr/share/cinnamon/js/ui"

    dconf load /org/cinnamon/ <./cinnamon/cinnamon.dconf

    sudo vim ${js_dir}/workspacesView.js
    sudo vim ${js_dir}/windowManager.js
}

config_gestures() {
    prompt $(func_name)

    conf="libinput-gestures.conf"

    sudo ln -s $(realpath gestures/${conf}) /etc/${conf}
    ln -s $(realpath gestures/${conf}.home) ~/.config/${conf}
}

config_symlinks() {
    prompt $(func_name)

    mkdir -p ~/.local/bin

    for f in $(ls tools/bin/*); do
        prompt "Adding symlink to ~/.local/bin/: $f"
        ln -sf $(realpath ${f}) ~/.local/bin
    done

    prompt "Adding symlink to ~/: .xbindkeysrc"
    ln -sf $(realpath tools/.xbindkeysrc) ~/
    xbindkeys --poll-rc
}

get_configs() {
    grep -oE "^config_[a-z0-9_]+" $0 | sed 's/config_//g' | sort
}

help() {
    echo -e "Usage: $0 <foo>\n"
    echo "Can configure the following:" && get_configs
}

case "$1" in
"" | --help | -h)
    help
    ;;
--list | -l)
    get_configs
    ;;
*)
    for item in "$@"; do
        echo $(get_configs) | grep -qw $item
        if [ $? -eq 0 ]; then config_$item; else red_prompt "No config for $item"; fi
    done
    ;;
esac
