#+TITLE: Doom Emacs Config
#+STARTUP: overview

Literate Doom Emacs config combining ={init,config,packages}.el=.
Each code block is tangled to the appropriate config file
using the provided =$HOME/.emacs.d/bin/org-tangle= utility.

* Basics
#+begin_src elisp :tangle config.el
(setq user-full-name "Alexandru Dinu"
      user-mail-address "alex.dinu07@gmail.com")

(setq confirm-kill-emacs nil)

(setq doom-theme 'doom-tomorrow-night)
(setq doom-font (font-spec :family "Iosevka Fixed SS09" :weight 'medium :size 16))

(setq display-line-numbers-type 'relative)
#+end_src

* UI
Disable =doom-dashboard= for a cleaner look and to immediately get a scratch buffer.
#+begin_src elisp :tangle init.el
(doom! :ui
       doom              ; what makes DOOM look the way it does
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ophints           ; highlight the region an operation acts on
       (popup +defaults) ; tame sudden yet inevitable temporary windows
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       workspaces        ; tab emulation, persistence & separate workspaces
)
#+end_src
* Completion
#+begin_src elisp :tangle init.el
(doom! :completion
       company ; the ultimate code completion backend
       ivy
)
#+end_src
* Editor
#+begin_src elisp :tangle init.el
(doom! :editor
       (evil +everywhere) ; come to the dark side, we have cookies
       file-templates     ; auto-snippets for empty files
       fold               ; (nigh) universal code folding
       multiple-cursors   ; editing in many places at once
       snippets           ; my elves. They type so I don't have to
)
#+end_src

#+begin_src elisp :tangle config.el
(setq-default tab-width 4
              indent-tabs-mode nil)

(setq-default c-basic-offset tab-width)
#+end_src
* Emacs
#+begin_src elisp :tangle init.el
(doom! :emacs
       dired    ; making dired pretty [functional]
       electric ; smarter, keyword-based electric-indent
       undo     ; persistent, smarter undo for your inevitable mistakes
       vc       ; version-control and Emacs, sitting in a tree
)
#+end_src
* Checkers
** Syntax
#+begin_src elisp :tangle init.el
(doom! :checkers syntax)
#+end_src
** Spelling
+ Using =(spell +aspell)= for [[https://github.com/hlissner/doom-emacs/blob/develop/modules/checkers/spell/README.org][checkers/spell]].
+ Personal dictionary is located at =ispell-personal-dictionary=.
+ If [[https://github.com/hlissner/doom-emacs/issues/4009][Spell-Fu marks every word as incorrect]], then =rm -rv $HOME/.emacs.d/.local/etc/spell-fu/*=.

#+begin_src elisp :tangle init.el
(doom! :checkers (spell +aspell))
#+end_src

#+begin_src elisp :tangle config.el
(setq ispell-dictionary "en")
#+end_src

* Tools
#+begin_src elisp :tangle init.el
(doom! :tools
       (eval +overlay) ; run code, run (also, repls)
       lookup          ; navigate your code and its documentation
       magit           ; a git porcelain for Emacs
)
#+end_src
* Lang
#+begin_src elisp :tangle init.el
(doom! :lang
       emacs-lisp
       latex
       markdown
       python
       sh
)
#+end_src
* Clipboard
+ Interact with system clipboard only through the =+= register to ensure consistency with vim.
+ To insert text from clipboard into the command line use =C-r +=.
#+begin_src elisp :tangle config.el
(setq x-select-enable-clipboard nil)
#+end_src

* Org
#+begin_src elisp :tangle init.el
(doom! :lang (org +roam2))
#+end_src

#+begin_src elisp :tangle config.el
(after! org
    (setq org-directory (file-truename "~/workspace/org.git"))
    (setq org-agenda-files (directory-files-recursively org-directory "\\.org$"))
    (setq org-log-done 'time)
    (setq org-startup-with-latex-preview t)
    (setq org-element-use-cache nil)
)
(after! org-roam
    (setq org-roam-directory (file-truename "~/workspace/org.git"))
    (setq org-roam-db-location (concat org-roam-directory "/org-roam.db"))
    (org-roam-db-autosync-mode)
    (setq org-roam-mode-section-functions
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section))
)
#+end_src

* Key bindings
| COMMAND      | KEYS      | DESCRIPTION |
| =dired=      | =SPC d j= | Open        |
| =dired-jump= | =SPC d d= | Jump to cwd |
#+begin_src elisp :tangle config.el
(map! :leader
    (:prefix ("d" . "dired")
     :desc "Dired: open"        "j" #'dired
     :desc "Dired: jump to cwd" "d" #'dired-jump))
#+end_src
* Config
#+begin_src elisp :tangle init.el
(doom! :config (default +bindings +smartparens))
#+end_src

* Packages-extra
#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
