#!/bin/bash
# Simplified https://github.com/jomo/imgur-screenshot

imgur_anon_id="ea6c0ef2987808e"

file_dir="${HOME}/screenshots"
file_name_format="imgur-%Y_%m_%d-%H:%M:%S.png"

upload_connect_timeout="5"
upload_timeout="120"
upload_retries="1"

screenshot_select_command="gnome-screenshot -a -f %img"
screenshot_window_command="gnome-screenshot -w -f %img"
screenshot_full_command="gnome-screenshot -f %img"
open_command="xdg-open %url"

mode="select"
open="false"
copy_url="false"

############## END CONFIG ##############

function take_screenshot() {
    echo "Please select area"

    cmd="screenshot_${mode}_command"
    cmd=${!cmd//\%img/${1}}

    shot_err="$(${cmd} &>/dev/null)"
    if [ "${?}" != "0" ]; then
        echo "Failed to take screenshot '${1}': '${shot_err}'"
        exit 1
    fi
}

function upload_anonymous_image() {
    echo "Uploading '${1}'..."

    title="$(echo "${1}" | rev | cut -d "/" -f 1 | cut -d "." -f 2- | rev)"
    response="$(curl --compressed --connect-timeout "${upload_connect_timeout}" -m "${upload_timeout}" --retry "${upload_retries}" -fsSL --stderr - -H "Authorization: Client-ID ${imgur_anon_id}" -F "title=${title}" -F "image=@\"${1}\"" https://api.imgur.com/3/image)"

    # JSON parser premium edition (not really)
    if egrep -q '"success":\s*true' <<<"${response}"; then
        img_id="$(egrep -o '"id":\s*"[^"]+"' <<<"${response}" | cut -d "\"" -f 4)"
        img_ext="$(egrep -o '"link":\s*"[^"]+"' <<<"${response}" | cut -d "\"" -f 4 | rev | cut -d "." -f 1 | rev)" # "link" itself has ugly '\/' escaping and no https!
        del_id="$(egrep -o '"deletehash":\s*"[^"]+"' <<<"${response}" | cut -d "\"" -f 4)"

        handle_upload_success "https://i.imgur.com/${img_id}.${img_ext}" "https://imgur.com/delete/${del_id}" "${1}"

    else # upload failed
        err_msg="$(egrep -o '"error":\s*"[^"]+"' <<<"${response}" | cut -d "\"" -f 4)"
        test -z "${err_msg}" && err_msg="${response}"
    fi
}

function handle_upload_success() {
    echo ""
    echo "image  link: ${1}"
    echo "delete link: ${2}"

    if [ "${copy_url}" = "true" ]; then
        echo -n "${1}" | xclip -selection clipboard
        echo "URL copied to clipboard"
    fi

    if [ ! -z "${open_command}" ] && [ "${open}" = "true" ]; then
        open_cmd=${open_command//\%url/${1}}
        open_cmd=${open_cmd//\%img/${2}}
        echo "Opening '${open_cmd}'"
        eval "${open_cmd}"
    fi
}

while [ ${#} != 0 ]; do
    case "${1}" in
    -s | --select)
        mode="select"
        shift;;
    -w | --window)
        mode="window"
        shift;;
    -f | --full)
        mode="full"
        shift;;
    -o | --open)
        open="true"
        shift;;
    -c | --copy)
        copy_url="true"
        shift;;
    *)
        break;;
    esac
done


if [ -z "${upload_files}" ]; then
    upload_files[0]=""
fi

for upload_file in "${upload_files[@]}"; do
    if [ -z "${upload_file}" ]; then
        cd "${file_dir}" || exit 1

        # new filename with date
        img_file="$(date +"${file_name_format}")"
        take_screenshot "${img_file}"
    else
        # upload file instead of screenshot
        img_file="${upload_file}"
    fi

    # get full path
    img_file="$(cd "$( dirname "${img_file}")" && echo "$(pwd)/$(basename "${img_file}")")"

    # check if file exists
    if [ ! -f "${img_file}" ]; then
        echo "file '${img_file}' doesn't exist !"
        exit 1
    fi

    upload_anonymous_image "${img_file}"

    echo ""
done
